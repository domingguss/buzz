package  {		import flash.display.Sprite;	import flash.events.Event;    import flash.events.KeyboardEvent;    import flash.ui.Keyboard;    import flash.display.SimpleButton;    import flash.events.MouseEvent;    import flash.display.StageDisplayState;    import flash.display.MovieClip;    import com.greensock.TweenMax;	import com.greensock.easing.Back;    import flash.display.Stage;    import flash.desktop.NativeProcessStartupInfo;    import flash.filesystem.File;    import flash.desktop.NativeProcess;    import flash.utils.Timer;    import flash.events.TimerEvent;    import flash.display.Shape;    import com.greensock.TimelineLite;    import flash.utils.setTimeout;    import flash.media.SoundChannel;		public class Main extends Sprite     {		const teamViewWidth:Number = 750;		const teamViewHeight:Number = 100;		        private var _keys:Object = { };        private var _teamViews:Array = [];				public var team1: MovieClip;		public var team2: MovieClip;		public var team3: MovieClip;		public var team4: MovieClip;		public var backgroundMC: MovieClip;				private var backgroundShape: Sprite;				private var process: NativeProcess;				private var keepAliveTimer: Timer;		private var lightUpAllLEDs: Boolean = false;				        public function Main():void         {            if (stage) init();            else addEventListener(Event.ADDED_TO_STAGE, init);        }        private function init(e:Event = null):void         {            removeEventListener(Event.ADDED_TO_STAGE, init);            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);            stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);            stage.addEventListener(Event.ENTER_FRAME, onEnterFrame);						stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;						// send status to wbuzz every 30 seconds to keep alive the controllers			keepAliveTimer = new Timer(30000, 0);			keepAliveTimer.addEventListener(TimerEvent.TIMER, keepAliveTimerTickHandler);			keepAliveTimer.start();						team1.scoreLabel.text = 0 + "";			team2.scoreLabel.text = 0 + "";			team3.scoreLabel.text = 0 + "";			team4.scoreLabel.text = 0 + "";									reset();        }				private function keepAliveTimerTickHandler (e:TimerEvent):void{			trace("keep alive");			sendStatus();		}		private function onKeyDown(e:KeyboardEvent):void         {            _keys[e.keyCode] = true;						if (e.keyCode == Keyboard.ENTER) {				setLEDStatus("all");			}						        }        private function onKeyUp(e:KeyboardEvent):void         {            _keys[e.keyCode] = false; 						if (e.keyCode == Keyboard.ENTER) {				sendStatus();			}						if (e.keyCode == Keyboard.NUMBER_1) {				incrementScore(team1);			}						if (e.keyCode == Keyboard.NUMBER_2) {				incrementScore(team2);			}						if (e.keyCode == Keyboard.NUMBER_3) {				incrementScore(team3);			}						if (e.keyCode == Keyboard.NUMBER_4) {				incrementScore(team4);			}						if (e.keyCode == Keyboard.F1) {				decrementScore(team1);			}						if (e.keyCode == Keyboard.F2) {				decrementScore(team2);			}						if (e.keyCode == Keyboard.F3) {				decrementScore(team3);			}						if (e.keyCode == Keyboard.F4) {				decrementScore(team4);			}			        }        private function onEnterFrame(e:Event):void         {            if (_keys[Keyboard.SPACE]) {				reset();			}                        if (_keys[Keyboard.A] || _keys[Keyboard.B] || _keys[Keyboard.C] || _keys[Keyboard.D] || _keys[Keyboard.E]) {                present(team1);            }						if (_keys[Keyboard.F] || _keys[Keyboard.G] || _keys[Keyboard.H] || _keys[Keyboard.I] || _keys[Keyboard.J]) {                present(team2);            }						if (_keys[Keyboard.K] || _keys[Keyboard.L] || _keys[Keyboard.M] || _keys[Keyboard.N] || _keys[Keyboard.O]) {                present(team3);            }						if (_keys[Keyboard.P] || _keys[Keyboard.Q] || _keys[Keyboard.R] || _keys[Keyboard.S] || _keys[Keyboard.T]) {                present(team4);            }        }				function incrementScore(mc:MovieClip): void {			var score:int = parseInt(mc.scoreLabel.text)			score++;			mc.scoreLabel.text = score + "";		}				function decrementScore(mc:MovieClip): void {			var score:int = parseInt(mc.scoreLabel.text)			score--;			mc.scoreLabel.text = score + "";		}				private function reset(): void {			var desiredWidth:Number = stage.width / 4;			var desiredHeight:Number = (teamViewHeight * desiredWidth) / teamViewWidth;						var y:Number = stage.height - desiredHeight;			TweenMax.to(team1, 1, {x:desiredWidth * 0, y:y, width:desiredWidth, height:desiredHeight});			TweenMax.to(team2, 1, {x:desiredWidth * 1, y:y, width:desiredWidth, height:desiredHeight});			TweenMax.to(team3, 1, {x:desiredWidth * 2, y:y, width:desiredWidth, height:desiredHeight});			TweenMax.to(team4, 1, {x:desiredWidth * 3, y:y, width:desiredWidth, height:desiredHeight});						_teamViews = []			sendStatus();						setBackgroundColor(0x000000);		}				private function present(teamView: MovieClip): void {			if (_teamViews.indexOf(teamView) >= 0) {				// already presented				return; 			}						var x:Number = (stage.width - teamViewWidth) / 2;			var y:Number = (stage.height / 4 * _teamViews.length) + ((stage.height / 4) - teamViewHeight) / 2;			TweenMax.to(teamView, 1, {x:x, y:y, width: teamViewWidth, height: teamViewHeight, ease:Back.easeOut});						_teamViews.push(teamView);						if (_teamViews.length >= 1) {				sendStatus();			}		}						// -------------- send state to Buzz Controllers ---------------						private function sendStatus(): void {						if (_teamViews.length >= 1) {				var teamView = _teamViews[0];				switch (teamView) {					case team1:						setLEDStatus("1");						setBackgroundColor(0x0066FF);						var s:Thomas = new Thomas(); 						var channel1:SoundChannel = s.play();						break;					case team2:						setLEDStatus("2");						setBackgroundColor(0xFF6600);						var t:Bakker = new Bakker(); 						var channel2:SoundChannel = t.play();						break;					case team3:						setLEDStatus("3");						setBackgroundColor(0x009900);						var u:Nils = new Nils(); 						var channel3:SoundChannel = u.play();						break;					case team4:						setLEDStatus("4");						setBackgroundColor(0xFFCC00);						var v:Dick = new Dick(); 						var channel4:SoundChannel = v.play();						break;				}			} else if (_teamViews.length == 0) {				setLEDStatus("0");			}		}						private function setLEDStatus(status: String): void {			var nativeProcessStartupInfo = new NativeProcessStartupInfo() 			var file = File.applicationDirectory.resolvePath("buzz"); 			nativeProcessStartupInfo.executable = file; 			var processArgs = new Vector.<String>();			processArgs[0] = status; 			nativeProcessStartupInfo.workingDirectory = File.documentsDirectory; 			nativeProcessStartupInfo.arguments = processArgs; 			process = new NativeProcess()			process.start(nativeProcessStartupInfo); 		}				private function setBackgroundColor(color: uint): void {						_setBackgroundColor(color);			setTimeout(_setBackgroundColor, 1.0, 0xFFFFFF);			setTimeout(_setBackgroundColor, 2.0, color);			setTimeout(_setBackgroundColor, 3.0, 0xFFFFFF);			setTimeout(_setBackgroundColor, 4.0, color);								}				private function _setBackgroundColor(color: uint): void {						if (backgroundShape != null) {				backgroundMC.removeChild(backgroundShape);			}						trace(color);						var bkg:Sprite=new Sprite();			bkg.graphics.beginFill(color, 1)			bkg.graphics.drawRect(0,0,backgroundMC.width, backgroundMC.height);			bkg.graphics.endFill();			backgroundMC.addChild(bkg)						backgroundShape = bkg		}			    }}